import argparse
from transformers import pipeline, TextGenerationPipeline

# ------------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã -------------------------
MODEL_NAME = "Qwen/Qwen3-4B-Instruct-2507"
MAX_OUTPUT_TOKENS = 512
MAX_INPUT_TOKENS = 8192

SYSTEM_PROMPT_STYLE = (
    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞. "
    "–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç—ë–ø–ª—ã–π', '—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π'). "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –æ—Ç—Ä–∞–∂–∞—é—â–∏–π —ç—Ç–æ—Ç —Å—Ç–∏–ª—å."
)

SYSTEM_PROMPT_CONGRATS = (
    "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π. "
    "–°–æ–∑–¥–∞–π –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–µ –±–æ–ª–µ–µ 100 —Å–ª–æ–≤, "
    "–∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è. "
    "–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —è —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–º."
)

# ------------------------- –§—É–Ω–∫—Ü–∏–∏ -------------------------

def init_pipeline() -> TextGenerationPipeline:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –º–æ–¥–µ–ª–∏."""
    return pipeline(
        task="text-generation",
        model=MODEL_NAME,
        device_map="auto",
        dtype="auto"
    )

def get_style_example(style_name: str, pipe: TextGenerationPipeline) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ (GenAI-1-21)."""
    message = [
        {"role": "system", "content": SYSTEM_PROMPT_STYLE},
        {"role": "user", "content": f"–°—Ç–∏–ª—å: {style_name}"}
    ]
    result = pipe(message, max_new_tokens=128, return_full_text=False)[0]["generated_text"]
    return result.strip()

def generate_congratulation(name: str, age: int, interests: list[str],
                            style_text: str, pipe: TextGenerationPipeline) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ style_text (GenAI-2-21)."""
    interests_str = ", ".join(interests)
    user_prompt = (
        f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_str}\n\n"
        f"–°—Ç–∏–ª—å –ø—Ä–∏–º–µ—Ä–∞:\n{style_text}\n\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç—ë–ø–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ:"
    )
    message = [
        {"role": "system", "content": SYSTEM_PROMPT_CONGRATS},
        {"role": "user", "content": user_prompt}
    ]
    result = pipe(message, max_new_tokens=MAX_OUTPUT_TOKENS, return_full_text=False)[0]["generated_text"]
    text = result.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (‚â§100 —Å–ª–æ–≤)
    words = len(text.split())
    if words > 100:
        print(f" –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {words} —Å–ª–æ–≤ (–ª–∏–º–∏—Ç 100).")
    return text

def save_txt(text: str, path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    with open(path, "w", encoding="utf-8") as f:
        f.write(text)
    print(f"  –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {path}")

# ------------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç -------------------------

def main():
    parser = argparse.ArgumentParser("GenAI-3-31")
    parser.add_argument("--name", required=True, help="–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    parser.add_argument("--age", required=True, type=int, help="–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    parser.add_argument("--interests", nargs="+", required=True, help="–ò–Ω—Ç–µ—Ä–µ—Å—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
    parser.add_argument("--style", default="—Ç—ë–ø–ª—ã–π", help="–°—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '—Ç—ë–ø–ª—ã–π')")
    parser.add_argument("-o", "--output", default="congratulation.txt", help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ .txt —Ñ–∞–π–ª–∞")
    args = parser.parse_args()

    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
    try:
        pipe = init_pipeline()
        print(" –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        print(f"\033[31m–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:\n{e}\033[0m")
        return

    try:
        print(f" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è: {args.style!r}")
        style_text = get_style_example(args.style, pipe)
        print(f" –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è:\n{style_text}\n")

        print(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è...")
        congrats = generate_congratulation(args.name, args.age, args.interests, style_text, pipe)
        save_txt(congrats, args.output)
        print("\n–ì–æ—Ç–æ–≤–æ üéÅ")
    except Exception as e:
        print(f"\033[31m–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:\n{e}\033[0m")

if __name__ == "__main__":
    main()
